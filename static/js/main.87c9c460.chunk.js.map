{"version":3,"sources":["components/Plant.js","components/List.js","components/Form.js","App.js","index.js"],"names":["Plant","name","days","plants","setPlants","plant","className","growthTime","daysLeft","Date","parse","datePlanted","now","daysLeftRoundedUp","Math","ceil","daysToHarvest","onClick","filterOut","filter","el","key","icon","faTrash","List","mapOverPlantList","map","id","Form","formVisibility","setFormVisibility","inputName","setInputName","inputDays","setInputDays","setDatePlanted","getVisibility","dateHarvest","setDateHarvest","handleCloseForm","clearForm","onSubmit","event","preventDefault","uniqid","onChange","target","value","type","required","placeholder","App","useState","useEffect","getLocalStorage","setLocalStorage","localStorage","getItem","setItem","JSON","stringify","storedData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87c9c460.chunk.js","sourcesContent":["import React from 'react';\n// Importing just one FA's icon for individual use. Advice is to set up proper global use, if more icons would be imported.\n// More info: https://fontawesome.com/how-to-use/on-the-web/using-with/react#get-started\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst Plant = ({ name, days, plants, setPlants, plant }) => {\n  // This works like this:\n  // Array 'plants' is filtered out. Each 'plant.key' is compared to this el's/plant's key. Everything that's NOT matching key - goes to new array. So, the only matching thing, element that's been just clicked on, stays out. Finally, 'setPlants' sets our new array as the only one that's still existing, and useEffect in App.js refreshes localStorage. This element is deleted.\n  const handlePlantDelete = () => {\n    const filterOut = plants.filter((el) => el.key !== plant.key);\n    setPlants(filterOut);\n  };\n\n  // All time calculations are hidden in this function. It uses growth time and today's date to return an answer: how long do they have to wait, until plant's ready.\n  // Probably needs refactoring, to use .getTime() instead of variables with milliseconds. Will complicate final rule, but will definitely clean up the code.\n  const daysToHarvest = () => {\n    // Growth time in milliseconds format. One day is 86 400 000 miliseconds.\n    const growthTime = days * 86400000;\n\n    // Planting date in milliseconds format.\n    const datePlantedConverted = Date.parse(plant.datePlanted);\n\n    // Harvest date in milliseconds format.\n    const harvestDate = datePlantedConverted + growthTime;\n\n    // Today's date in milliseconds format.\n    const today = Date.now();\n\n    // How many days until harvest?\n    const daysLeft = (harvestDate - today) / 86400000;\n\n    // Rounds up days, to display full number instead of decimals or zero.\n    const daysLeftRoundedUp = Math.ceil(daysLeft);\n\n    if (daysLeft < 1) {\n      return `it's ready!`;\n    } else {\n      return daysLeftRoundedUp + ' days to harvest';\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"plantWrapper\">\n        <li className=\"plantName plantMainName\">{name}</li>\n        <li className=\"plantHarvest\">{daysToHarvest()}</li>\n        <li className=\"plantAction plantDelete\" onClick={handlePlantDelete}>\n          <FontAwesomeIcon icon={faTrash} />\n        </li>\n      </div>\n      <div className=\"separator\"></div>\n    </div>\n  );\n};\n\nexport default Plant;\n","import React from 'react';\nimport Plant from './Plant';\n\nconst List = ({ plants, setPlants }) => {\n  const mapOverPlantList = plants.map((plant) => (\n    <Plant\n      name={plant.name}\n      days={plant.days}\n      key={plant.key}\n      plants={plants}\n      setPlants={setPlants}\n      id={plant.key}\n      plant={plant}\n    />\n  ));\n  return (\n    <div className=\"plantsList\">\n      <div className=\"plantsListKey\">\n        <li className=\"plantName\">name</li>\n        <li className=\"plantHarvest\">harvest</li>\n        <li className=\"plantAction\"></li>\n      </div>\n      <ul>{mapOverPlantList}</ul>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport uniqid from 'uniqid';\n\nconst Form = ({\n  formVisibility,\n  setFormVisibility,\n  inputName,\n  setInputName,\n  inputDays,\n  setInputDays,\n  plants,\n  setPlants,\n  datePlanted,\n  setDatePlanted,\n  dateHarvest,\n  setDateHarvest,\n}) => {\n  // Assigns new class, based on formVisibility.\n  const getVisibility = formVisibility ? 'visible' : 'hidden';\n\n  const handleCloseForm = () => {\n    clearForm();\n    setFormVisibility(false);\n  };\n\n  const handleNameChange = (event) => {\n    setInputName(event.target.value);\n  };\n\n  const handleDaysChange = (event) => {\n    setInputDays(event.target.value);\n  };\n\n  const handleDateChange = (event) => {\n    setDatePlanted(event.target.value);\n  };\n\n  const handleFormSubmit = (event) => {\n    // Prevents refresh.\n    event.preventDefault();\n    // Adds to 'plants' array with spread operator.\n    setPlants([\n      ...plants,\n      {\n        name: inputName,\n        days: inputDays,\n        datePlanted: datePlanted,\n        key: uniqid(),\n      },\n    ]);\n    // Deletes all input values from form.\n    clearForm();\n    // Closes the form.\n    handleCloseForm();\n  };\n\n  // Clears all input fields:\n  const clearForm = () => {\n    setInputName('');\n    setInputDays('');\n    setDatePlanted('');\n  };\n\n  return (\n    <div className={`form ${getVisibility}`}>\n      <form className=\"formWrapper\" onSubmit={handleFormSubmit}>\n        <input\n          className=\"formInput\"\n          onChange={handleNameChange}\n          value={inputName}\n          type=\"text\"\n          required\n          placeholder=\"tomato\"\n        />\n        <input\n          className=\"formInput\"\n          onChange={handleDaysChange}\n          value={inputDays}\n          type=\"number\"\n          placeholder=\"120 days\"\n        />\n        <input\n          className=\"formInput\"\n          onChange={handleDateChange}\n          value={datePlanted}\n          type=\"date\"\n          placeholder=\"planted on...\"\n        />\n        <div className=\"buttons\">\n          <button className=\"button closeForm\" onClick={handleCloseForm}>\n            cancel\n          </button>\n          <button className=\"button submitForm\" type=\"submit\">\n            add\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport uniqid from 'uniqid';\nimport './App.css';\nimport List from './components/List';\nimport Form from './components/Form';\n\nfunction App() {\n  // State-related:\n  // Creates array of objects, to be displayed as a list. For now, it contains dummy objects, used in the List.js component.\n  const [plants, setPlants] = useState([]);\n\n  const [formVisibility, setFormVisibility] = useState(false);\n  const [inputName, setInputName] = useState('');\n  const [inputDays, setInputDays] = useState('');\n  const [datePlanted, setDatePlanted] = useState('');\n  const [dateHarvest, setDateHarvest] = useState('');\n\n  //Local storage logic:\n  // Load storage on start:\n  useEffect(() => {\n    getLocalStorage();\n  }, []);\n\n  // Save storage on [plants] change\n  useEffect(() => {\n    setLocalStorage();\n  }, [plants]);\n\n  // Load 'plants from local storage. If localStorage is empty - starts w/ empty array.\n  const getLocalStorage = () => {\n    if (localStorage.getItem('plants') === null) {\n      localStorage.setItem('plants', JSON.stringify([]));\n    } else {\n      let storedData = JSON.parse(localStorage.getItem('plants'));\n      setPlants(storedData);\n    }\n  };\n\n  // Save 'plants' to local storage.\n  const setLocalStorage = () => {\n    localStorage.setItem('plants', JSON.stringify(plants));\n  };\n\n  // Toggles form visibility. Sets boolean 'formVisibility' value to the opposite.\n  const toggleFormDisplay = () => {\n    setFormVisibility(!formVisibility);\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>all plants:</h2>\n      <List plants={plants} setPlants={setPlants} />\n      <div className=\"inputWrapper\">\n        <button className=\"button showForm\" onClick={toggleFormDisplay}>\n          new\n        </button>\n      </div>\n      <Form\n        formVisibility={formVisibility}\n        setFormVisibility={setFormVisibility}\n        inputName={inputName}\n        setInputName={setInputName}\n        inputDays={inputDays}\n        setInputDays={setInputDays}\n        plants={plants}\n        setPlants={setPlants}\n        datePlanted={datePlanted}\n        setDatePlanted={setDatePlanted}\n        dateHarvest={dateHarvest}\n        setDateHarvest={setDateHarvest}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}